/**
 *  netatmo-Wind
 *
 *  Copyright 2016 Jim Kirkby
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
metadata {
	definition (name: "Netatmo Wind", namespace: "JimKirkby", author: "Jim Kirkby") {
		attribute "wind", "number"
        attribute "WindAngle", "number"
        attribute "WindStrength", "number"
        attribute "GustStrength", "number"
        attribute "units", "string"

        command "poll"
	}

	simulator {
		// TODO: define status and reply messages here
	}

	tiles {
 		valueTile("WindStrength", "device.WindStrength", width: 2, height: 2) {
 			state("WindStrength", label: '${currentValue}mph', unit:"mph", backgroundColors: [
 				[value: 1, color: "#153591"],
 				[value: 5, color: "#1e9cbb"],
 				[value: 10, color: "#90d2a7"],
 				[value: 15, color: "#44b621"],
 				[value: 20, color: "#f1d801"],
 				[value: 40, color: "#d04e00"],
 				[value: 60, color: "#bc2323"]
 				]
 				)

 		}
 		valueTile("WindAngle", "device.WindAngle", inactiveLabel: false) {
 			state "default", label:'${currentValue}Â°'
 		}
 		valueTile("GustStrength", "device.GustStrength", inactiveLabel: false) {
 			state "default", label:'${currentValue}mph', backgroundColors: [
 				[value: 5, color: "#44B621"],
                [value: 10, color: "#ffcc00"],
                [value: 20, color: "#e86d13"],
                [value: 25, color: "#ff0000"]
 				]
 		}
 		standardTile("refresh", "device.wind", inactiveLabel: false, decoration: "flat") {
 			state "default", action:"refresh.poll", icon:"st.secondary.refresh"
 		}
 		main (["WindStrength", "WindAngle", "GustStrength"])
 		details(["WindStrength", "WindAngle", "GustStrength", "refresh"])
	}
}

// parse events into attributes
def parse(String description) {
	log.debug "Parsing '${description}'"
}

def poll() {
	parent.poll()
}
